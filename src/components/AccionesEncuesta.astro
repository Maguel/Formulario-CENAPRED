---
// src/components/AccionesEncuesta.astro
// Barra de acciones para guardar y borrar la encuesta
// Utiliza di√°logos nativos del navegador para confirmaci√≥n

interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<section class={`panel ${className ?? ""}`}>
  <div class="actions">
    <button
      class="btn btn--ghost"
      id="btn-borrar"
      type="button"
      aria-label="Borrar encuesta actual"
    >
      üóëÔ∏è Borrar encuesta
    </button>

    <button
      class="btn btn--primary"
      id="btn-guardar"
      type="button"
      aria-label="Guardar encuesta actual"
    >
      üíæ Guardar encuesta
    </button>
  </div>
</section>

<style>
  /* ===== Variables CSS ===== */
  :root {
    --color-primary: #00b7c7;
    --color-primary-hover: #00ccdb;
    --color-danger: #b3261e;
    --color-danger-bg: #ffeceb;
    --color-text: #111;
    --color-bg: #fff;
    --font-family: Arial, Helvetica, sans-serif;
    --font-size-base: 13.5px;
    --border-width: 2px;
    --border-radius: 10px;
    --panel-width: min(1060px, 94vw);
    --spacing-sm: 0.6rem;
    --spacing-md: 0.75rem;
    --spacing-lg: 0.9rem;
    --spacing-xl: 14px;
  }

  /* ===== Panel Container ===== */
  .panel {
    width: var(--panel-width);
    margin: var(--spacing-xl) auto;
    border: var(--border-width) solid var(--color-primary);
    background: var(--color-bg);
    font-family: var(--font-family);
    color: var(--color-text);
    font-size: var(--font-size-base);
    padding: var(--spacing-md) var(--spacing-lg);
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  /* ===== Actions Container ===== */
  .actions {
    display: flex;
    justify-content: flex-end;
    gap: var(--spacing-sm);
    flex-wrap: wrap;
  }

  /* ===== Button Base Styles ===== */
  .btn {
    appearance: none;
    border: var(--border-width) solid transparent;
    padding: 0.55rem var(--spacing-lg);
    border-radius: var(--border-radius);
    font-weight: 700;
    font-size: inherit;
    font-family: inherit;
    cursor: pointer;
    transition:
      transform 0.04s ease,
      box-shadow 0.2s ease,
      background-color 0.2s ease,
      border-color 0.2s ease;
    line-height: 1;
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);
    user-select: none;
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
  }

  .btn:active {
    transform: translateY(1px);
  }

  .btn:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  /* ===== Button Variants ===== */
  .btn--primary {
    background: var(--color-primary);
    color: var(--color-bg);
    border-color: var(--color-primary);
  }

  .btn--primary:hover {
    background: var(--color-primary-hover);
    border-color: var(--color-primary-hover);
  }

  .btn--ghost {
    background: var(--color-bg);
    color: var(--color-danger);
    border-color: var(--color-danger);
  }

  .btn--ghost:hover {
    background: var(--color-danger-bg);
  }

  /* ===== Responsive ===== */
  @media (max-width: 480px) {
    .actions {
      justify-content: stretch;
    }

    .btn {
      flex: 1;
      justify-content: center;
    }
  }
</style>

<script>
  // Tipos para mejorar la seguridad del c√≥digo
  interface EncuestaActions {
    handleSave: () => void;
    handleDelete: () => void;
  }

  class EncuestaActionsHandler implements EncuestaActions {
    private saveButton: HTMLButtonElement | null;
    private deleteButton: HTMLButtonElement | null;

    constructor() {
      this.saveButton = document.getElementById(
        "btn-guardar",
      ) as HTMLButtonElement;
      this.deleteButton = document.getElementById(
        "btn-borrar",
      ) as HTMLButtonElement;
      this.init();
    }

    private init(): void {
      this.saveButton?.addEventListener("click", this.handleSave.bind(this));
      this.deleteButton?.addEventListener(
        "click",
        this.handleDelete.bind(this),
      );
    }

    handleSave(): void {
      // En producci√≥n, aqu√≠ ir√≠a la l√≥gica real de guardado
      // Por ahora, mostramos confirmaci√≥n con alert nativo
      alert("Encuesta guardada correctamente.");

      // Disparar evento personalizado para que otros componentes puedan reaccionar
      window.dispatchEvent(
        new CustomEvent("encuesta:saved", {
          detail: { timestamp: new Date().toISOString() },
        }),
      );
    }

    handleDelete(): void {
      const confirmMessage =
        "¬øDeseas borrar la encuesta? Esta acci√≥n recargar√° la p√°gina.";

      if (confirm(confirmMessage)) {
        alert("Encuesta borrada.");

        // Disparar evento antes de recargar
        window.dispatchEvent(
          new CustomEvent("encuesta:deleted", {
            detail: { timestamp: new Date().toISOString() },
          }),
        );

        // Peque√±o delay para permitir que se procese el evento
        setTimeout(() => {
          window.location.reload();
        }, 100);
      }
    }

    // M√©todo para limpiar event listeners si es necesario
    destroy(): void {
      this.saveButton?.removeEventListener("click", this.handleSave);
      this.deleteButton?.removeEventListener("click", this.handleDelete);
    }
  }

  // Inicializar cuando el DOM est√© listo
  document.addEventListener("DOMContentLoaded", () => {
    new EncuestaActionsHandler();
  });

  // Compatibilidad con View Transitions API de Astro
  document.addEventListener("astro:page-load", () => {
    new EncuestaActionsHandler();
  });
</script>
