---
// src/components/InformacionGeneral.astro
// Homologado sin mover el layout del header. Se respeta el formato y orden original:
// Título arriba, debajo la línea horizontal con Fecha y Coordenadas (N/O) en una misma fila.
// Se sustituye únicamente el campo "msnm" por un botón contrastado y claro.

interface Props {
  class?: string;
  readonly?: boolean;
}

const { class: className, readonly = false } = Astro.props;

const usos = [
  "Vivienda",
  "Oficinas",
  "Comercio",
  "Escuela",
  "Hospital",
  "Iglesia",
  "Reunión (cine/estadio/salón)",
  "Industrial (fábrica/bodega)",
  "Desocupada",
] as const;

const topo = [
  "Loma/Cerro",
  "Ladera",
  "Pie de ladera",
  "Pie de monte",
  "Rivera río/lago",
  "Fondo de valle",
  "Depósitos lacustres",
  "Costa",
] as const;
---

<section class={`panel ${className ?? ""}`} data-readonly={readonly}>
  <header class="panel__header">
    <h2>INFORMACIÓN GENERAL</h2>
    <div class="meta">
      <div class="field-inline">
        <span>Fecha:</span>
        <input class="short date" type="date" disabled={readonly} />
      </div>
      <div class="field-inline">
        <span>Coordenadas:&nbsp;</span>
        <span>Latitud</span>
        <input
          id="lat"
          class="short"
          type="text"
          inputmode="decimal"
          placeholder="19° 25' 56&quot;"
          disabled={readonly}
        />
        <span>Longitud</span>
        <input
          id="lng"
          class="short"
          type="text"
          inputmode="decimal"
          placeholder="99° 08' 45&quot;"
          disabled={readonly}
        />
        <!-- Aquí estaba msnm: lo sustituimos por el botón -->
        <button
          id="btnCoords"
          class="btn btn--sm btn--header"
          type="button"
          disabled={readonly}
          title="Rellenar lat/lon automáticamente">Obtener coordenadas</button
        >
      </div>
      <small id="coordsStatus" class="hint" role="status" aria-live="polite"
      ></small>
    </div>
  </header>

  <div class="content">
    <!-- Identificación y ubicación -->
    <section class="block">
      <h3 class="block__title">Identificación y ubicación</h3>
      <div class="grid two">
        <label class="field field--wide">
          <span class="lbl">Nombre del inmueble</span>
          <input
            class="line"
            type="text"
            placeholder="Ej. Torre Central"
            disabled={readonly}
          />
        </label>
        <label class="field field--wide">
          <span class="lbl">Dirección (calle, número, colonia)</span>
          <input
            class="line"
            type="text"
            placeholder="Av. Reforma 123, Centro"
            disabled={readonly}
          />
        </label>
        <label class="field">
          <span class="lbl">Municipio/Alcaldía</span>
          <input class="line" type="text" disabled={readonly} />
        </label>
        <label class="field">
          <span class="lbl">Estado</span>
          <input class="line" type="text" disabled={readonly} />
        </label>
      </div>
    </section>

    <!-- Contacto -->
    <section class="block">
      <h3 class="block__title">Contacto</h3>
      <div class="grid two">
        <label class="field">
          <span class="lbl">Propietario / Responsable</span>
          <input class="line" type="text" disabled={readonly} />
        </label>
        <label class="field">
          <span class="lbl">Teléfono</span>
          <input
            class="line"
            type="tel"
            placeholder="+(52) 55 1234 5678"
            disabled={readonly}
          />
        </label>
        <label class="field field--wide">
          <span class="lbl">Correo electrónico</span>
          <input
            class="line"
            type="email"
            placeholder="nombre@dominio.com"
            disabled={readonly}
          />
        </label>
      </div>
    </section>

    <!-- Uso -->
    <section class="block">
      <h3 class="block__title">Uso</h3>
      <div class="grid multi">
        {
          usos.map((u) => (
            <label class="chk">
              <>
                <input
                  type="checkbox"
                  name="uso"
                  value={u}
                  disabled={readonly}
                />
                <span>{u}</span>
              </>
            </label>
          ))
        }
        <label class="chk chk--other">
          <input type="checkbox" name="uso" value="otro" disabled={readonly} />
          <span>Otro:</span>
          <input
            class="line-other"
            type="text"
            placeholder="Especifique"
            disabled={readonly}
          />
        </label>
      </div>
    </section>

    <!-- Dimensiones y características -->
    <section class="block">
      <h3 class="block__title">Dimensiones y características</h3>
      <div class="grid four">
        <label class="field">
          <span class="lbl">No. niveles</span>
          <input
            class="line short"
            type="text"
            inputmode="numeric"
            disabled={readonly}
          />
        </label>
        <label class="field">
          <span class="lbl">No. sótanos</span>
          <input
            class="line short"
            type="text"
            inputmode="numeric"
            disabled={readonly}
          />
        </label>
        <label class="field">
          <span class="lbl">No. ocupantes</span>
          <input
            class="line short"
            type="text"
            inputmode="numeric"
            disabled={readonly}
          />
        </label>
        <div class="field dims">
          <span class="lbl">Dimensiones</span>
          <div class="dims__row">
            <div class="dim-field">
              <span>Frente X</span><input
                class="line-mini"
                type="text"
                inputmode="decimal"
              /><span>m</span>
            </div>
            <div class="dim-field">
              <span>Fondo Y</span><input
                class="line-mini"
                type="text"
                inputmode="decimal"
              /><span>m</span>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Topografía -->
    <section class="block">
      <h3 class="block__title">Topografía</h3>
      <div class="grid multi">
        {
          topo.map((t) => (
            <label class="chk">
              <>
                <input
                  type="checkbox"
                  name="topografia"
                  value={t}
                  disabled={readonly}
                />
                <span>{t}</span>
              </>
            </label>
          ))
        }
      </div>
    </section>
  </div>
</section>

<style>
  :root {
    --color-primary: #00b7c7;
    --color-primary-dark: #0aa;
    --color-primary-hover: #00a8b5;
    --color-bg: #fff;
    --color-text: #111;
    --color-text-dark: #0f0f0f;
    --color-text-muted: #39555b;

    --font-family: Arial, Helvetica, sans-serif;
    --font-size-base: 13.5px;

    --border-width: 2px;
    --border-input: 1.8px;

    --panel-width: min(1060px, calc(100vw - 20px));

    --sp-6: 0.45rem;
    --sp-8: 0.6rem;
    --sp-10: 0.75rem;
    --sp-12: 0.9rem;
    --sp-14: 14px;

    --check-size: 14px;
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  .panel {
    width: var(--panel-width);
    margin: var(--sp-14) auto;
    border: var(--border-width) solid var(--color-primary);
    background: var(--color-bg);
    color: var(--color-text);
    font-family: var(--font-family);
    font-size: var(--font-size-base);
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }

  .panel__header {
    background: var(--color-primary);
    color: var(--color-bg);
    padding: var(--sp-8) var(--sp-12);
    border-bottom: var(--border-width) solid var(--color-primary-dark);
  }
  .panel__header h2 {
    font-weight: 800;
    font-size: 15.5px;
    text-align: left;
  }
  .panel__header .meta {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem 1rem;
    flex-wrap: wrap;
    margin-top: 0.5rem;
  }

  .field-inline {
    display: inline-flex;
    align-items: center;
    gap: 0.35rem;
    flex-wrap: wrap;
  }

  .content {
    padding: var(--sp-10) var(--sp-12);
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .block {
    border: var(--border-width) solid #000;
    padding: var(--sp-10);
  }
  .block__title {
    margin-bottom: var(--sp-8);
    font-size: 14px;
    font-weight: 800;
  }

  .grid {
    display: grid;
    gap: 12px;
  }
  .grid.two {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid.four {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
  .grid.multi {
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    align-items: start;
  }

  .field {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }
  .field--wide {
    grid-column: 1 / -1;
  }
  .lbl {
    font-size: 12.5px;
    color: #0a0a0a;
    font-weight: 600;
  }

  /* Inputs blancos y compactos */
  .line {
    border: var(--border-input) solid #cfd8dc;
    background: var(--color-bg);
    padding: 0.4rem 0.45rem;
    font-size: 13.5px;
    color: #111;
    outline: none;
    width: 100%;
    border-radius: 6px;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.04);
  }
  .line:focus {
    border-color: var(--color-primary);
  }
  .line::placeholder {
    color: #8aa5ac;
  }
  .line.short {
    max-width: 120px;
  }
  .line-mini {
    border: var(--border-input) solid #cfd8dc;
    background: var(--color-bg);
    padding: 0.25rem 0.35rem;
    font-size: 13px;
    width: 88px;
    border-radius: 6px;
  }
  .line-other {
    border: var(--border-input) solid #cfd8dc;
    background: var(--color-bg);
    padding: 0.25rem 0.35rem;
    font-size: 13px;
    border-radius: 6px;
    width: 100%;
    min-width: 0;
  }

  /* Inputs del header (lat/lon/fecha) con fondo blanco y ancho fijo */
  .short {
    max-width: 110px;
    border: var(--border-input) solid #cfd8dc;
    background: var(--color-bg);
    padding: 0.25rem 0.35rem;
    font-size: 13px;
    border-radius: 6px;
  }
  .date {
    max-width: 160px;
  }

  .dims {
    gap: 8px;
  }
  .dims__row {
    display: flex;
    flex-wrap: wrap;
    gap: 14px;
    align-items: center;
  }
  .dim-field {
    display: flex;
    align-items: center;
    gap: 6px;
  }

  /* Checkboxes */
  .chk {
    display: inline-grid;
    grid-auto-flow: column;
    align-items: center;
    gap: 0.35rem;
    min-height: 24px;
  }
  .chk input[type="checkbox"] {
    appearance: none;
    width: var(--check-size);
    height: var(--check-size);
    border: var(--border-input) solid var(--color-text-dark);
    background: var(--color-bg);
    display: inline-grid;
    place-items: center;
    cursor: pointer;
  }
  .chk input[type="checkbox"]:checked {
    background: var(--color-primary);
    box-shadow: inset 0 0 0 2px var(--color-bg);
  }

  /* "Otro": evitar desborde */
  .chk--other {
    display: grid;
    grid-template-columns: auto auto minmax(0, 1fr);
    align-items: center;
    gap: 0.35rem;
  }

  /* Botón visible en header (contraste sobre fondo teal) */
  .btn {
    font-weight: 700;
    cursor: pointer;
    border-radius: 20px;
  }
  .btn--sm {
    padding: 6px 12px;
    font-size: 12.5px;
  }
  .btn--header {
    background: #fff;
    color: var(--color-primary);
    border: 2px solid var(--color-primary);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);
  }
  .btn--header:hover {
    background: #f7feff;
  }
  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  @media (max-width: 1024px) {
    .grid.four {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  @media (max-width: 768px) {
    .grid.two {
      grid-template-columns: 1fr;
    }
  }
  @media (max-width: 480px) {
    :root {
      --font-size-base: 12.5px;
      --check-size: 12px;
    }
    .grid.four {
      grid-template-columns: 1fr;
    }
    .panel {
      width: calc(100vw - 10px);
      margin: 8px auto;
    }
  }
</style>

<script>
  // Geolocalización: estado controlado (sin error prematuro)
  class GeoLocator {
    private latInput: HTMLInputElement | null;
    private lngInput: HTMLInputElement | null;
    private btn: HTMLButtonElement | null;
    private statusEl: HTMLElement | null;
    private inFlight = false;

    constructor() {
      this.latInput = document.querySelector<HTMLInputElement>("#lat");
      this.lngInput = document.querySelector<HTMLInputElement>("#lng");
      this.btn = document.querySelector<HTMLButtonElement>("#btnCoords");
      this.statusEl = document.querySelector<HTMLElement>("#coordsStatus");

      this.handleClick = this.handleClick.bind(this);
      this.btn?.addEventListener("click", this.handleClick);
    }

    private setStatus(msg: string) {
      if (this.statusEl) this.statusEl.textContent = msg;
    }

    private setDisabled(disabled: boolean) {
      if (this.btn) this.btn.disabled = disabled;
    }

    private handleClick(): void {
      if (!("geolocation" in navigator)) {
        this.setStatus("Geolocalización no soportada por este navegador.");
        return;
      }
      this.inFlight = true;
      this.setStatus("Obteniendo coordenadas…");
      this.setDisabled(true);

      navigator.geolocation.getCurrentPosition(
        (pos) => {
          this.inFlight = false;
          const { latitude, longitude } = pos.coords;
          if (this.latInput) this.latInput.value = latitude.toFixed(6);
          if (this.lngInput) this.lngInput.value = longitude.toFixed(6);
          this.setStatus("Coordenadas establecidas.");
          this.setDisabled(false);
        },
        (err) => {
          this.inFlight = false;
          let msg = "No se pudo obtener la ubicación.";
          if (err.code === 1) msg += " Permiso denegado.";
          else if (err.code === 2) msg += " Posición no disponible.";
          else if (err.code === 3) msg += " Tiempo de espera agotado.";
          this.setStatus(msg);
          this.setDisabled(false);
        },
        { enableHighAccuracy: true, maximumAge: 30000, timeout: 20000 },
      );
    }

    public destroy(): void {
      this.btn?.removeEventListener("click", this.handleClick);
      if (this.inFlight) this.setStatus("");
    }
  }

  let geo: GeoLocator | null = null;
  const init = () => {
    geo = new GeoLocator();
  };
  const cleanup = () => {
    geo?.destroy();
    geo = null;
  };

  document.addEventListener("DOMContentLoaded", init);
  document.addEventListener("astro:before-preparation", cleanup);
  document.addEventListener("astro:page-load", init);
</script>
